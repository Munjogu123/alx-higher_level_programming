Test case for 7-base_geometry module
====================================

Usage

Importing function from module
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Trying value of type str
    >>> bg = BaseGeometry()
    >>> try:
    ...     bg.integer_validator("name", "John")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

Trying value that is 0
    >>> bg = BaseGeometry()
    >>> try:
    ...     bg.integer_validator("age", 0)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] age must be greater than 0

Trying value that is negative
    >>> bg = BaseGeometry()
    >>> try:
    ...     bg.integer_validator("distance", -4)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] distance must be greater than 0

Trying value that is list
    >>> bg = BaseGeometry()
    >>> try:
    ...     bg.integer_validator("list", [1, 2, 4])
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] list must be an integer

Trying value that is tuple
    >>> bg = BaseGeometry()
    >>> try:
    ...     bg.integer_validator("tuple", (1, 2))
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] tuple must be an integer

Trying value that is dict
    >>> bg = BaseGeometry()
    >>> try:
    ...     bg.integer_validator("dict", {"key": "value"})
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] dict must be an integer

Trying value that is a float
    >>> bg = BaseGeometry()
    >>> try:
    ...     bg.integer_validator("float", 1.5)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] float must be an integer

Checking for no arguments
    >>> bg = BaseGeometry()
    >>> try:
    ...     bg.integer_validator()
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

Checking for one argument
    >>> bg = BaseGeometry()
    >>> try:
    ...     bg.integer_validator("age")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

Checking for multiple arguments
    >>> bg = BaseGeometry()
    >>> try:
    ...     bg.integer_validator("age", 20, 4)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] BaseGeometry.integer_validator() takes 3 positional arguments but 4 were given
